

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.*;
import javax.swing.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Hp
 */
public class access_permission extends javax.swing.JDialog {

    /**
     * Creates new form access_permission
     */    
    int x;
    login_employee confirmer;
    
    public access_permission(java.awt.Frame parent, boolean modal, String emp_id, int y, login_employee perm) {
        super(parent, modal);
        initComponents();
        
        label_id.setText(emp_id);
        x = y;
        
        confirmer = perm;
        
        setIconImage(new ImageIcon(".\\icons\\Icon.png").getImage());
    }
    
    public access_permission(java.awt.Frame parent, boolean modal, String emp_id, int y) {
        super(parent, modal);
        initComponents();
        
        label_id.setText(emp_id);
        x = y;
        
        setting_states();
        checking_changes();
        
        setIconImage(new ImageIcon(".\\icons\\Icon.png").getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label_permission_title = new javax.swing.JLabel();
        label_admin_pass = new javax.swing.JLabel();
        passwordfield_admin_pass = new javax.swing.JPasswordField();
        label_emp_id = new javax.swing.JLabel();
        label_id = new javax.swing.JLabel();
        checkbox_instore = new javax.swing.JCheckBox();
        checkbox_placedorders = new javax.swing.JCheckBox();
        checkbox_suppliers = new javax.swing.JCheckBox();
        checkbox_clientorders = new javax.swing.JCheckBox();
        checkbox_appointments = new javax.swing.JCheckBox();
        checkbox_clientinfo = new javax.swing.JCheckBox();
        checkbox_salesrecords = new javax.swing.JCheckBox();
        button_ok = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        label_permission_title.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        label_permission_title.setForeground(new java.awt.Color(0, 0, 0));
        label_permission_title.setText("SET PERMISSIONS");

        label_admin_pass.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        label_admin_pass.setForeground(new java.awt.Color(0, 0, 0));
        label_admin_pass.setText("ADMIN PASSWORD:");

        passwordfield_admin_pass.setBackground(new java.awt.Color(255, 255, 255));
        passwordfield_admin_pass.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        passwordfield_admin_pass.setForeground(new java.awt.Color(0, 0, 0));

        label_emp_id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        label_emp_id.setForeground(new java.awt.Color(0, 0, 0));
        label_emp_id.setText("EMPLOYEE ID:");

        label_id.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        label_id.setForeground(new java.awt.Color(0, 0, 0));
        label_id.setText("ID");

        checkbox_instore.setBackground(new java.awt.Color(0, 0, 153));
        checkbox_instore.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        checkbox_instore.setText("STOCK INFORMATION");

        checkbox_placedorders.setBackground(new java.awt.Color(0, 0, 153));
        checkbox_placedorders.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        checkbox_placedorders.setText("SUPPLY ORDERS");

        checkbox_suppliers.setBackground(new java.awt.Color(0, 0, 153));
        checkbox_suppliers.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        checkbox_suppliers.setText("SUPPLIERS");

        checkbox_clientorders.setBackground(new java.awt.Color(0, 0, 153));
        checkbox_clientorders.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        checkbox_clientorders.setText("CLIENT ORDERS");

        checkbox_appointments.setBackground(new java.awt.Color(0, 0, 153));
        checkbox_appointments.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        checkbox_appointments.setText("APPOINTMENTS");

        checkbox_clientinfo.setBackground(new java.awt.Color(0, 0, 153));
        checkbox_clientinfo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        checkbox_clientinfo.setText("CLIENTS");

        checkbox_salesrecords.setBackground(new java.awt.Color(0, 0, 153));
        checkbox_salesrecords.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        checkbox_salesrecords.setText("SALES RECORDS");
        checkbox_salesrecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_salesrecordscheckbox_salesrecordsActionPerformed(evt);
            }
        });

        button_ok.setBackground(new java.awt.Color(102, 0, 153));
        button_ok.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        button_ok.setText("OK");
        button_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_okbutton_okActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_admin_pass)
                            .addComponent(label_emp_id)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(checkbox_instore, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(checkbox_suppliers, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(checkbox_salesrecords, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordfield_admin_pass)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkbox_clientorders, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkbox_placedorders, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkbox_clientinfo))
                                .addGap(18, 18, 18)
                                .addComponent(checkbox_appointments, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(label_id)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(label_permission_title)
                        .addGap(200, 200, 200))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_ok)
                .addGap(241, 241, 241))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_permission_title)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_admin_pass)
                    .addComponent(passwordfield_admin_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_emp_id)
                    .addComponent(label_id))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkbox_instore)
                    .addComponent(checkbox_placedorders))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkbox_suppliers)
                    .addComponent(checkbox_clientorders)
                    .addComponent(checkbox_appointments))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkbox_salesrecords)
                    .addComponent(checkbox_clientinfo))
                .addGap(18, 18, 18)
                .addComponent(button_ok)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkbox_salesrecordscheckbox_salesrecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_salesrecordscheckbox_salesrecordsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkbox_salesrecordscheckbox_salesrecordsActionPerformed

    private void button_okbutton_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_okbutton_okActionPerformed
        // TODO add your handling code here:
        if (x == 1)
        signup_access();

        if (x == 2)
        empinfo_access();
    }//GEN-LAST:event_button_okbutton_okActionPerformed

    void signup_access() {
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/optical_store_management_system", "root", "");
                        
            char[] pass_input_char = passwordfield_admin_pass.getPassword();
            String pass_input = String.valueOf(pass_input_char);
        
            PreparedStatement stmn = con.prepareStatement("Select pass from login_info, employee_information where pass = ? and login_info.employee_id = employee_information.employee_id AND designation = 'Owner'");
        
            stmn.setString(1, pass_input);
            ResultSet rs = stmn.executeQuery();
            
            if(passwordfield_admin_pass.getPassword().length==0)  // Checking for empty field
            JOptionPane.showMessageDialog(null, "ENTER PASSWORD TO SAVE CHANGES");
            
            else
            {
                if (rs.next()) {
                    Statement stm = con.createStatement();
                    String query;
                    String id = label_id.getText();
                    stm.execute("SET FOREIGN_KEY_CHECKS=0");
                    
                    try {
                        query = "INSERT INTO `employee_permissions`(`employee_id`) VALUES ('" + id + "')";
                        stm.executeUpdate(query);
                    }
                    catch (SQLException exp) {
                        JOptionPane.showMessageDialog(null, "Employee ID already exists.");
                    }
                    
                        //CLIENT INFO
                        if (checkbox_clientinfo.isSelected() == true) 
                            query = "UPDATE `employee_permissions` SET `client` = 1 WHERE `employee_id` = '" + id + "'";
                        else
                            query = "UPDATE `employee_permissions` SET `client` = 0 WHERE `employee_id` = '" + id + "'";
                        
                        stm.executeUpdate(query);
                        
                        //APPOINTMENTS
                        if (checkbox_appointments.isSelected() == true) 
                            query = "UPDATE `employee_permissions` SET `appointment` = 1 WHERE `employee_id` = '" + id + "'";
                        else
                            query = "UPDATE `employee_permissions` SET `appointment` = 0 WHERE `employee_id` = '" + id + "'";
                        
                        stm.executeUpdate(query);
                        
                        //CLIENT ORDERS
                        if (checkbox_clientorders.isSelected() == true) 
                            query = "UPDATE `employee_permissions` SET `orders` = 1 WHERE `employee_id` = '" + id + "'";
                        else
                            query = "UPDATE `employee_permissions` SET `orders` = 0 WHERE `employee_id` = '" + id + "'";
                        
                        stm.executeUpdate(query);
                        
                        //IN STORE
                        if (checkbox_instore.isSelected() == true) 
                            query = "UPDATE `employee_permissions` SET `product` = 1 WHERE `employee_id` = '" + id + "'";
                        else
                            query = "UPDATE `employee_permissions` SET `product` = 0 WHERE `employee_id` = '" + id + "'";
                        
                        stm.executeUpdate(query);
                        
                        //PLACED ORDERS
                        if (checkbox_placedorders.isSelected() == true) 
                            query = "UPDATE `employee_permissions` SET `supplies` = 1 WHERE `employee_id` = '" + id + "'";
                        else
                            query = "UPDATE `employee_permissions` SET `supplies` = 0 WHERE `employee_id` = '" + id + "'";
                        
                        stm.executeUpdate(query);
                        
                        //SALES RECORDS
                        if (checkbox_salesrecords.isSelected() == true) 
                            query = "UPDATE `employee_permissions` SET `sales` = 1 WHERE `employee_id` = '" + id + "'";
                        else
                            query = "UPDATE `employee_permissions` SET `sales` = 0 WHERE `employee_id` = '" + id + "'";
                        
                        stm.executeUpdate(query);
                        
                        //SUPPLIERS
                        if (checkbox_suppliers.isSelected() == true) 
                            query = "UPDATE `employee_permissions` SET `supplier` = 1 WHERE `employee_id` = '" + id + "'";
                        else
                            query = "UPDATE `employee_permissions` SET `supplier` = 0 WHERE `employee_id` = '" + id + "'";
                        
                        stm.executeUpdate(query);
                                              
                        stm.execute("SET FOREIGN_KEY_CHECKS=1");
                        
                        con.close();
                        
                        confirmer.confirm = 1;
                        
                        dispose();
                        
                    }
                
                else
                {
                    JOptionPane.showMessageDialog(null, "Incorrect Password\nTRY AGAIN");
                }
            }
        }
        catch (SQLException sqlExp) {
            JOptionPane.showMessageDialog(null, "DATABSE CONNECTION FAILED");
            
        }
    }
    
    void empinfo_access() {
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/optical_store_management_system", "root", "");
            PreparedStatement stm;
            ResultSet rs;
            
            char[] pass_input_char = passwordfield_admin_pass.getPassword();
            String pass_input = String.valueOf(pass_input_char);
        
            stm = con.prepareStatement("Select pass from login_info, employee_information where pass = ? and login_info.employee_id = employee_information.employee_id AND designation = 'Owner'");
        
            stm.setString(1, pass_input);
            rs = stm.executeQuery();
            
            if(passwordfield_admin_pass.getPassword().length==0)  // Checking for empty field
            JOptionPane.showMessageDialog(null, "ENTER PASSWORD TO SAVE CHANGES");
            
            else
            {
                if (rs.next())
                {
                    con.close();
                    
                    JOptionPane.showMessageDialog(null, "CHANGES SAVED");
                    
                    dispose();
                }
                
                else
                {
                    JOptionPane.showMessageDialog(null, "Incorrect Password\nTRY AGAIN");
                }
            }
        }
        catch (SQLException sqlExp) {
            JOptionPane.showMessageDialog(null, "DATABSE CONNECTION FAILED");
        }
    }
    
    void setting_states()
    {
        try
        {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/optical_store_management_system", "root", "");
            PreparedStatement stm;
            ResultSet rs;
            
            int state;
            String id = label_id.getText();
            String query;
                    
            //IN STORE
            query = "SELECT product from employee_permissions WHERE employee_id = '" + id + "'";
                    
            stm = con.prepareStatement(query);
            rs = stm.executeQuery();

            if (rs.next())
            {
                state = rs.getInt(1);

            if (state == 1)
                checkbox_instore.setSelected(true);
            }
            
            //APPOINTMENTS
            query = "SELECT appointment from employee_permissions WHERE employee_id = '" + id + "'";
                    
            stm = con.prepareStatement(query);
            rs = stm.executeQuery();

            if (rs.next())
            {
                state = rs.getInt(1);

            if (state == 1)
                checkbox_appointments.setSelected(true);
            }
            
            //SUPPLIERS
            query = "SELECT supplier from employee_permissions WHERE employee_id = '" + id + "'";
                    
            stm = con.prepareStatement(query);
            rs = stm.executeQuery();

            if (rs.next())
            {
                state = rs.getInt(1);

            if (state == 1)
                checkbox_suppliers.setSelected(true);
            }
            
            //SALES RECORDS
            query = "SELECT sales from employee_permissions WHERE employee_id = '" + id + "'";
                    
            stm = con.prepareStatement(query);
            rs = stm.executeQuery();

            if (rs.next())
            {
                state = rs.getInt(1);

            if (state == 1)
                checkbox_salesrecords.setSelected(true);
            }
            
            //PLACED ORDERS
            query = "SELECT supplies from employee_permissions WHERE employee_id = '" + id + "'";
                    
            stm = con.prepareStatement(query);
            rs = stm.executeQuery();

            if (rs.next())
            {
                state = rs.getInt(1);

            if (state == 1)
                checkbox_placedorders.setSelected(true);
            }
            
            //CLIENT ORDERS
            query = "SELECT orders from employee_permissions WHERE employee_id = '" + id + "'";
                    
            stm = con.prepareStatement(query);
            rs = stm.executeQuery();

            if (rs.next())
            {
                state = rs.getInt(1);

            if (state == 1)
                checkbox_clientorders.setSelected(true);
            }
            
            //CLIENT INFORMATION
            query = "SELECT client from employee_permissions WHERE employee_id = '" + id + "'";
                    
            stm = con.prepareStatement(query);
            rs = stm.executeQuery();

            if (rs.next())
            {
                state = rs.getInt(1);

            if (state == 1)
                checkbox_clientinfo.setSelected(true);
            }
            
        }
        catch (SQLException sqlExp) {
            JOptionPane.showMessageDialog(null, "DATABSE CONNECTION FAILED");
        }
    }
    
    void checking_changes() {
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/optical_store_management_system", "root", "");
            Statement stm = con.createStatement();
            String id = label_id.getText();
            stm.execute("SET FOREIGN_KEY_CHECKS=0");

        //APPOINTMENTS
        checkbox_appointments.addItemListener((ItemEvent e) -> {
            String query;
            try {
                if (e.getStateChange()==1)

                    query = "UPDATE `employee_permissions` SET `appointment` = 1 WHERE `employee_id` = '" + id + "'";
                else
                    query = "UPDATE `employee_permissions` SET `appointment` = 0 WHERE `employee_id` = '" + id + "'";

                stm.executeUpdate(query);
                
                
            }
            catch (SQLException sqlExp) {
                JOptionPane.showMessageDialog(null,sqlExp);
            }   });
        
        //IN STORE
        checkbox_instore.addItemListener((ItemEvent e) -> {
            String query;
            try {
                if (e.getStateChange()==1)

                    query = "UPDATE `employee_permissions` SET `product` = 1 WHERE `employee_id` = '" + id + "'";
                else
                    query = "UPDATE `employee_permissions` SET `product` = 0 WHERE `employee_id` = '" + id + "'";

                stm.executeUpdate(query);
                
                
            }
            catch (SQLException sqlExp) {
                JOptionPane.showMessageDialog(null,sqlExp);
            }   });
        
        //CLIENT INFO
        checkbox_clientinfo.addItemListener((ItemEvent e) -> {
            String query;
            try {
                if (e.getStateChange()==1)

                    query = "UPDATE `employee_permissions` SET `client` = 1 WHERE `employee_id` = '" + id + "'";
                else
                    query = "UPDATE `employee_permissions` SET `client` = 0 WHERE `employee_id` = '" + id + "'";

                stm.executeUpdate(query);
                
                
            }
            catch (SQLException sqlExp) {
                JOptionPane.showMessageDialog(null,sqlExp);
            }   });
        
        //CLIENT ORDERS
        checkbox_clientorders.addItemListener((ItemEvent e) -> {
            String query;
            try {
                if (e.getStateChange()==1)

                    query = "UPDATE `employee_permissions` SET `orders` = 1 WHERE `employee_id` = '" + id + "'";
                else
                    query = "UPDATE `employee_permissions` SET `orders` = 0 WHERE `employee_id` = '" + id + "'";

                stm.executeUpdate(query);
                
                
            }
            catch (SQLException sqlExp) {
                JOptionPane.showMessageDialog(null,sqlExp);
            }   });
        
        //PLACED ORDERS
        checkbox_placedorders.addItemListener((ItemEvent e) -> {
            String query;
            try {
                if (e.getStateChange()==1)

                    query = "UPDATE `employee_permissions` SET `supplies` = 1 WHERE `employee_id` = '" + id + "'";
                else
                    query = "UPDATE `employee_permissions` SET `supplies` = 0 WHERE `employee_id` = '" + id + "'";

                stm.executeUpdate(query);
                
                
            }
            catch (SQLException sqlExp) {
                JOptionPane.showMessageDialog(null,sqlExp);
            }   });
        
        //SALES RECORDS
        checkbox_salesrecords.addItemListener((ItemEvent e) -> {
            String query;
            try {
                if (e.getStateChange()==1)

                    query = "UPDATE `employee_permissions` SET `sales` = 1 WHERE `employee_id` = '" + id + "'";
                else
                    query = "UPDATE `employee_permissions` SET `sales` = 0 WHERE `employee_id` = '" + id + "'";

                stm.executeUpdate(query);
                
                
            }
            catch (SQLException sqlExp) {
                JOptionPane.showMessageDialog(null,sqlExp);
            }   });
        
        //SUPPLIERS
        checkbox_suppliers.addItemListener((ItemEvent e) -> {
            String query;
            try {
                if (e.getStateChange()==1)

                    query = "UPDATE `employee_permissions` SET `supplier` = 1 WHERE `employee_id` = '" + id + "'";
                else
                    query = "UPDATE `employee_permissions` SET `supplier` = 0 WHERE `employee_id` = '" + id + "'";

                stm.executeUpdate(query);
                
                
            }
            catch (SQLException sqlExp) {
                JOptionPane.showMessageDialog(null,sqlExp);
            }   });
        
            stm.execute("SET FOREIGN_KEY_CHECKS=1");
        }
        catch (SQLException sqlExp) {
                JOptionPane.showMessageDialog(null,sqlExp);
            }
        
    }
    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_ok;
    private javax.swing.JCheckBox checkbox_appointments;
    private javax.swing.JCheckBox checkbox_clientinfo;
    private javax.swing.JCheckBox checkbox_clientorders;
    private javax.swing.JCheckBox checkbox_instore;
    private javax.swing.JCheckBox checkbox_placedorders;
    private javax.swing.JCheckBox checkbox_salesrecords;
    private javax.swing.JCheckBox checkbox_suppliers;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label_admin_pass;
    private javax.swing.JLabel label_emp_id;
    private javax.swing.JLabel label_id;
    private javax.swing.JLabel label_permission_title;
    private javax.swing.JPasswordField passwordfield_admin_pass;
    // End of variables declaration//GEN-END:variables
}
